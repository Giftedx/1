name: Production CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'

jobs:
  security-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Cache Security DBs
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/trivy
            ~/.cache/snyk
            ~/.cache/pre-commit
            ~/.local/share/trivy
          key: ${{ runner.os }}-security-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-security-

      - name: Run Snyk analysis
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: |
            --severity-threshold=high
            --all-projects
            --detection-depth=4
            --sarif-file-output=snyk.sarif

      - name: Run security tools
        run: |
          pip install bandit safety semgrep pre-commit
          pre-commit run --all-files || true
          bandit -r . -ll -iii --exclude tests/ -f sarif -o bandit-results.sarif
          safety check --full-report --json --skip-dev-dependencies > safety-report.json
          semgrep scan --config=p/security-audit --sarif > semgrep-results.sarif

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
          format: 'sarif'
          output: 'trivy-results.sarif'
          timeout: '10m'
          cache-dir: .trivycache

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'discord-media-bot'
          path: '.'
          format: 'SARIF'
          failOnCVSS: 7
          enableExperimental: true
          additionalArguments: >
            --suppression suppression.xml
            --nodeAuditSkipDevDependencies
            --nodePackageSkipDevDependencies

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy-results

      - name: Upload additional SARIF results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif
          category: snyk-results

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep-results

      - name: Upload Bandit results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif
          category: bandit-results

  code-quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        run: |
          pip install flake8 black

      - name: Run flake8
        run: flake8 src/

      - name: Run black
        run: black --check src/

  build-test-deploy:
    needs: [security-audit, code-quality-check]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set environment for bot mode
        run: echo "SERVICE_MODE=bot" >> .env
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir -r requirements.txt
      - name: Run security checks
        run: |
          pip install bandit safety semgrep
          bandit -r . -ll -iii --exclude tests/
          safety check --full-report
          semgrep scan --config=p/security-audit
      - name: Run comprehensive security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          ignore-unfixed: true
          severity: CRITICAL,HIGH,MEDIUM
          format: sarif
          output: trivy-results.sarif
          timeout: '10m'
          cache-dir: .trivycache
      - name: Type checking
        run: |
          pip install mypy types-all
          mypy src/ --strict --warn-unused-configs --disallow-untyped-defs
      - name: Run tests with coverage
        run: |
          pytest -v -n auto --cov=src --cov-report=xml --cov-report=html --cov-fail-under=85
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: buildx-
      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3
      - name: Build and scan Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: media-app:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Scan Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          trivy image --severity HIGH,CRITICAL --ignore-unfixed media-app:latest --exit-code 0
      - name: Run performance tests
        run: |
          pip install locust
          locust --headless -f tests/performance/locustfile.py --users 50 --spawn-rate 5 -H http://localhost:9090 --run-time 1m
      - name: Docker security scan
        if: github.ref == 'refs/heads/main'
        run: |
          docker scout cves media-app:latest || true
          docker scout recommendations media-app:latest || true
      - name: Advanced security scanning
        run: |
          trivy fs --security-checks vuln,config,secret --ignore-unfixed --exit-code 1 --severity HIGH,CRITICAL . || true
          grype dir:. --fail-on high --config grype.yaml
      - name: Check for outdated dependencies
        run: |
          pip install pip-audit
          pip-audit || true
      - name: Performance benchmarking
        run: |
          pip install locust
          locust --headless -f tests/performance/locustfile.py --users 100 --spawn-rate 10 --run-time 5m --html performance-report.html
          # Add a fail condition based on the report
          if grep -q "0 failures" performance-report.html; then
            echo "Performance tests passed"
          else
            echo "Performance tests failed"
            exit 1
          fi
      - name: Check license compliance
        run: |
          pip install license-checker
          license-checker --production --failOn GPL || true
